name: Build and Deploy Pages

on:
  workflow_dispatch:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
    paths:
      - 'appendix/**'
      - 'bibliography/**'
      - 'chapters/**'
      - 'fonts/**'
      - 'signatures/**'
      - 'style/**'
      - 'SWJTU_Bachelor_Thesis.tex'

permissions:
  id-token: write
  pages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up TeX Live
        uses: teatimeguest/setup-texlive-action@v3
        with:
          packages: >
            scheme-full

      - name: Build PDF
        run: |
          mkdir -p build/appendix build/chapters
          xelatex -synctex=1 -interaction=nonstopmode -file-line-error -output-directory=build SWJTU_Bachelor_Thesis.tex
          biber --output-directory=build SWJTU_Bachelor_Thesis
          xelatex -synctex=1 -interaction=nonstopmode -file-line-error -output-directory=build SWJTU_Bachelor_Thesis.tex
          xelatex -synctex=1 -interaction=nonstopmode -file-line-error -output-directory=build SWJTU_Bachelor_Thesis.tex

      - name: Prepare site directory
        run: |
          mkdir -p site
          cp build/SWJTU_Bachelor_Thesis.pdf site/

      - name: Get Latest Release URL
        id: get-latest-release-url
        run: |
          if [[ "${GITHUB_REF}" =~ refs/tags/(v.*) ]]; then
            TRIGGER_TAG="${BASH_REMATCH[1]}"
          else
            TRIGGER_TAG=""
          fi

          if [[ -n "$TRIGGER_TAG" ]]; then
            echo "Latest tag: $TRIGGER_TAG"
            
            MAX_RETRIES=60
            RETRY=0
            
            while true; do
              VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
              echo "Latest release version: $VERSION"
              
              if [[ "$VERSION" == "$TRIGGER_TAG" ]]; then
                echo "Release is available."
                break
              fi
              
              if [[ $RETRY -ge $MAX_RETRIES ]]; then
                echo "Timed out waiting for release $TRIGGER_TAG to be available." >&2
                exit 1
              fi
              
              echo "Release not available yet. Waiting 10 seconds... ($((RETRY+1))/$MAX_RETRIES)"
              sleep 10
              RETRY=$((RETRY+1))
            done
          else
            # Not a tag push: just get the latest release
            VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
            echo "Latest release version: $VERSION"
          fi
          ZIP_NAME="SWJTU_Bachelor_Thesis_${VERSION}.zip"
          OVERLEAF_URL="https://www.overleaf.com/docs?snip_uri=https://github.com/${{ github.repository }}/releases/download/${VERSION}/${ZIP_NAME}&main_document=SWJTU_Bachelor_Thesis.tex&engine=xelatex"
          echo "overleafUrl=$OVERLEAF_URL" >> $GITHUB_OUTPUT

      - name: Generate Overleaf Redirect HTML
        run: |
          cat <<EOF > site/index.html
          <!DOCTYPE html>
          <html>  
          <head>
              <meta http-equiv="refresh" content="0; url=${{ steps.get-latest-release-url.outputs.overleafUrl }}" />
              <title>正在跳转至 Overleaf...</title>
          </head>
          <body>
              <p>正在跳转至 <a href="${{ steps.get-latest-release-url.outputs.overleafUrl }}">Overleaf</a>...</p>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload static site to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
